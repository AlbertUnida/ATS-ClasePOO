// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenants {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  status    String   @default("active")
  createdAt DateTime @default(now())

  usuarios      Usuarios[]
  roles         Roles[] // <-- agregar
  cargos        Cargos[]
  vacantes      Vacantes[]
  candidatos    Candidatos[]
  postulaciones Postulaciones[]
  eventos       EventoPostulaciones[] // <-- agregar
  entrevistas   Entrevistas[] // <-- agregar
  feedbacks     Feedback[] // <-- agregar
  AuditLog      AuditLog[]
}

model Usuarios {
  id        String   @id @default(cuid())
  tenantId  String
  tenants   Tenants  @relation(fields: [tenantId], references: [id])
  name      String
  email     String
  password  String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // vínculo opcional al registro de candidato (ver ajuste opcional de FK compuesta)
  candidatoId String?
  candidato   Candidatos? @relation(fields: [candidatoId], references: [id], onDelete: SetNull)

  roles               UsuarioRoles[]
  EventoPostulaciones EventoPostulaciones[]
  UsuarioPermisos     UsuarioPermisos[]

  @@unique([tenantId, email])
  @@unique([tenantId, candidatoId]) // 1:1 cuando es candidato (permite null)
  @@index([tenantId])
  @@index([email])
}

model Roles {
  id           String         @id @default(cuid())
  tenantId     String
  tenant       Tenants        @relation(fields: [tenantId], references: [id])
  name         String
  users        UsuarioRoles[]
  RolePermisos RolePermisos[]

  @@unique([tenantId, name])
}

model UsuarioRoles {
  userId String
  roleId String
  user   Usuarios @relation(fields: [userId], references: [id])
  role   Roles    @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Cargos {
  id               String   @id @default(cuid())
  tenantId         String
  tenant           Tenants  @relation(fields: [tenantId], references: [id])
  nombre           String
  competenciasJson String?
  createdAt        DateTime @default(now())

  vacantes Vacantes[]

  @@index([tenantId])
}

// model Vacantes {
//   id                  String   @id @default(cuid())
//   tenantId            String
//   tenant              Tenants  @relation(fields: [tenantId], references: [id])
//   cargoId             String
//   cargo               Cargos   @relation(fields: [cargoId], references: [id])
//   ubicacion           String?
//   tipoContrato        String?
//   estado              String   @default("abierta")
//   flujoAprobacionJson String?
//   createdAt           DateTime @default(now())
//   updatedAt           DateTime @updatedAt

//   postulaciones Postulaciones[]
//   Formularios   Formularios[]

//   @@index([tenantId, cargoId, estado])
// }

model Vacantes {
  id           String    @id @default(cuid())
  tenantId     String
  tenant       Tenants   @relation(fields: [tenantId], references: [id])
  cargoId      String
  cargo        Cargos    @relation(fields: [cargoId], references: [id])
  ubicacion    String?
  tipoContrato String?
  estado       String    @default("abierta")
  visibilidad  String    @default("PUBLICA") // PUBLICA | PRIVADA
  publicSlug   String?   @unique
  resumen      String?
  descripcion  String?
  publishedAt  DateTime?
  expiresAt    DateTime?

  flujoAprobacionJson String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // --- Auditoría mínima ---
  deletedAt          DateTime?
  // (Opcional) autoría
  createdByUserId    String?
  updatedByUserId    String?
  createdByAccountId String?
  updatedByAccountId String?

  postulaciones Postulaciones[]

  @@index([tenantId, cargoId, estado])
  @@index([tenantId, estado, visibilidad, createdAt])
  @@index([deletedAt])
}

model Candidatos {
  id         String   @id @default(cuid())
  tenantId   String?
  tenant     Tenants?  @relation(fields: [tenantId], references: [id])
  nombre     String
  email      String
  telefono   String?
  cvUrl      String?
  perfilJson String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt // <--- NUEVO

  // --- Auditoría mínima ---
  deletedAt          DateTime?
  // (Opcional) autoría
  createdByUserId    String?
  updatedByUserId    String?
  createdByAccountId String?
  updatedByAccountId String?

  postulaciones Postulaciones[]
  Usuarios      Usuarios[]

  cuentaId String?
  cuenta   CandidatoCuentas? @relation(fields: [cuentaId], references: [id])

  @@unique([tenantId, email]) // <--- cambia index -> unique
  @@index([tenantId]) // <--- NUEVO
  @@index([cuentaId])
  @@index([deletedAt]) // útil para filtrar activos
}

model Postulaciones {
  id               String     @id @default(cuid())
  tenantId         String
  tenant           Tenants    @relation(fields: [tenantId], references: [id])
  vacanteId        String
  vacante          Vacantes   @relation(fields: [vacanteId], references: [id])
  candidatoId      String
  candidato        Candidatos @relation(fields: [candidatoId], references: [id])

  estado           String     @default("postulado") // postulado | en_proceso | descartado | contratado
  fuente           String?
  mensaje          String? // NUEVO
  cvExtraUrl       String? // NUEVO

  matchScore       Float?
  matchDetailsJson String?

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?

  // Autoría
  createdByUserId    String?
  updatedByUserId    String?
  createdByAccountId String?
  updatedByAccountId String?

  // Relaciones adicionales
  eventos     EventoPostulaciones[]
  entrevistas Entrevistas[]
  feedbacks   Feedback[]

  @@unique([vacanteId, candidatoId])
  @@index([tenantId, vacanteId, candidatoId])
  @@index([tenantId, estado])
  @@index([deletedAt])
}

model EventoPostulaciones {
  id            String        @id @default(cuid())
  tenantId      String
  tenant        Tenants       @relation(fields: [tenantId], references: [id])
  postulacionId String
  postulacion   Postulaciones @relation(fields: [postulacionId], references: [id], onDelete: Cascade)
  estadoFrom    String?
  estadoTo      String
  actorUserId   String?
  actor         Usuarios?     @relation(fields: [actorUserId], references: [id])
  motivo        String?
  ts            DateTime      @default(now())

  @@index([tenantId, postulacionId])
}

model Entrevistas {
  id            String        @id @default(cuid())
  tenantId      String
  tenant        Tenants       @relation(fields: [tenantId], references: [id])
  postulacionId String
  postulacion   Postulaciones @relation(fields: [postulacionId], references: [id], onDelete: Cascade)
  tipo          String
  inicioTs      DateTime
  finTs         DateTime
  canal         String?
  resultado     String?
  notas         String?

  @@index([tenantId, postulacionId])
}

model Feedback {
  id               String        @id @default(cuid())
  tenantId         String
  tenant           Tenants       @relation(fields: [tenantId], references: [id])
  postulacionId    String
  postulacion      Postulaciones @relation(fields: [postulacionId], references: [id], onDelete: Cascade)
  evaluadorUserId  String?
  puntaje          Int
  competenciasJson String?
  comentario       String?
  recomendacion    Boolean?
  ts               DateTime      @default(now())

  @@index([tenantId, postulacionId])
}

model CandidatoCuentas {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  candidatos Candidatos[]
}

model Permisos {
  id          String            @id @default(cuid())
  codigo      String            @unique // ej: "vacantes.create"
  descripcion String?
  roles       RolePermisos[]
  usuarios    UsuarioPermisos[]
}

model RolePermisos {
  roleId    String
  permisoId String
  allowed   Boolean @default(true)

  role    Roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permiso Permisos @relation(fields: [permisoId], references: [id], onDelete: Cascade)

  @@id([roleId, permisoId])
  @@index([permisoId])
}

model UsuarioPermisos {
  userId    String
  permisoId String
  allowed   Boolean @default(true) // poné false para denegar explícito

  user    Usuarios @relation(fields: [userId], references: [id], onDelete: Cascade)
  permiso Permisos @relation(fields: [permisoId], references: [id], onDelete: Cascade)

  @@id([userId, permisoId])
  @@index([permisoId])
}

model AuditLog {
  id String   @id @default(cuid())
  ts DateTime @default(now())

  // multi-tenant (opcional)
  tenantId String?
  tenant   Tenants? @relation(fields: [tenantId], references: [id])

  // actor (uno u otro; ambos opcionales)
  actorUserId    String?
  actorAccountId String?
  actorEmail     String?

  // qué pasó
  action   String // "CREATE" | "UPDATE" | "DELETE" | "LOGIN" | "LOGOUT" | ...
  entity   String // "Vacantes" | "Candidatos" | ...
  entityId String
  note     String? // breve descripción (opcional)

  // metadatos útiles (opcionales)
  ip        String?
  userAgent String?
  path      String?

  @@index([tenantId, entity, entityId, ts])
  @@index([actorUserId, ts])
  @@index([actorAccountId, ts])
  @@index([action, ts])
}
